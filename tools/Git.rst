.. Git:

Git
====

Git 命令
--------

.. image:: ../_static/Git/git_logo.png
   :height: 100
   :target: https://git-scm.com

速查表
~~~~~~

+--------------------------------------------+-------------------------------+
|                                            |                               |
+============================================+===============================+
| **帮助**                                   |                               |
+--------------------------------------------+-------------------------------+
| ``git COMMAND --help``                     | 查看帮助信息                  |
+--------------------------------------------+-------------------------------+
| **配置工具**                               |                               |
+--------------------------------------------+-------------------------------+
| ``git config --global user.name "<name>"`` | 对你的提交设置关联的用户名    |
+--------------------------------------------+-------------------------------+
| ``git config --global user.email <email>`` | 对你的提交设置关联的邮箱地址  |
+--------------------------------------------+-------------------------------+
| ``git config --global color.ui auto``      | 命令行彩色输出                |
+--------------------------------------------+-------------------------------+
| ``git config --list``                      | 查看配置列表                  |
+--------------------------------------------+-------------------------------+
| **创建仓库**                               |                               |
+--------------------------------------------+-------------------------------+
| ``git init <directory>``                   | 将目标目录转换为 Git 仓库     |
+--------------------------------------------+-------------------------------+
| ``git init``                               | 将当前目录转换为 Git 仓库     |
+--------------------------------------------+-------------------------------+
| ``git clone <URL>``                        | **克隆** 现有的仓库, 包括     |
|                                            | 所有的文件、分支和提交        |
+--------------------------------------------+-------------------------------+
| **本地修改**                               |                               |
+--------------------------------------------+-------------------------------+
| ``git add <directory>``                    | 将目录内的所有更改 **添加**   |
|                                            | 到暂存区                      |
+--------------------------------------------+-------------------------------+
| ``git add <file>``                         | 将文件内的所有更改 **添加**   |
|                                            | 到暂存区                      |
+--------------------------------------------+-------------------------------+
| ``git add -p``                             | 将文件内的所有更改分次        |
|                                            | **添加** 到暂存区             |
+--------------------------------------------+-------------------------------+
| ``git commit -m "<message>"``              | **提交** 暂存的内容到本地仓库 |
+--------------------------------------------+-------------------------------+
| ``git commit -a -m "<message>"``           | 跳过暂存直接 **提交** 更改    |
|                                            | 到本地仓库                    |
+--------------------------------------------+-------------------------------+
| ``git rm <file>``                          | 从项目 **删除** 文件，并      |
|                                            | 记录到暂存区                  |
+--------------------------------------------+-------------------------------+
| ``git rm --cached <file>``                 | 停止追踪指定文件，但该文件会  |
|                                            | 保留在工作区                  |
+--------------------------------------------+-------------------------------+
| ``git mv <old-path> <new-path>``           | 在项目 **移动** 文件，并      |
|                                            | 记录到暂存区                  |
+--------------------------------------------+-------------------------------+
| ``git diff``                               | 显示未暂存的更改              |
+--------------------------------------------+-------------------------------+
| ``git diff --staged``                      | 显示已暂存未提交的更改        |
+--------------------------------------------+-------------------------------+
| ``git status``                             | 显示工作区状态                |
+--------------------------------------------+-------------------------------+
| ``git checkout -- <file>``                 | **丢弃** 工作区的更改         |
+--------------------------------------------+-------------------------------+
| ``git reset <file>``                       | **撤销** 文件的暂存区更改，   |
|                                            | 工作区不变                    |
+--------------------------------------------+-------------------------------+
| ``git reset --hard HEAD^``                 | **撤销** 暂存区的更改，       |
|                                            | 工作区 **回退** 到上一版本    |
|                                            |                               |
|                                            | * ^表示上一版本               |
|                                            | * ^^表示上两个版本            |
|                                            | * ~N表示上N个版本             |
+--------------------------------------------+-------------------------------+
| ``git reset``                              | 暂存区 **回退** 到上次提交，  |
|                                            | 工作区不变                    |
+--------------------------------------------+-------------------------------+
| ``git reset --hard``                       | 暂存区清空，                  |
|                                            | 工作区 **回退** 到上次提交    |
+--------------------------------------------+-------------------------------+
| ``git revert <commit>``                    | 创建一个新的提交**撤销**      |
|                                            | <commit>中的更改，            |
|                                            |                               |
|                                            | 然后应用在当前分支            |
+--------------------------------------------+-------------------------------+
| ``git commit --amend -m "<message>"``      | 用暂存区更改和最后一次提交    |
|                                            | 更改的组合                    |
|                                            |                               |
|                                            | **替换** 最后一次提交         |
|                                            |                               |
|                                            | 如果暂存区为空, 则修改        |
|                                            | 最后一次提交的信息            |
+--------------------------------------------+-------------------------------+
| ``git reset <commit>``                     | HEAD 指向 <commit>，          |
|                                            | 工作区不变                    |
+--------------------------------------------+-------------------------------+
| ``git reset --hard <commit>``              | 清空暂存区，用指定<commit>    |
|                                            | 覆盖工作区                    |
+--------------------------------------------+-------------------------------+
| ``git log``                                | 本地仓库提交日志              |
|                                            |                               |
|                                            | * --oneline 每个提交一行      |
|                                            | * --graphe 基于文本的图形化   |
+--------------------------------------------+-------------------------------+
| ``git reflog``                             | 本地仓库 HEAD 更改日志        |
|                                            |                               |
|                                            | * --relative-dat 显示时间     |
|                                            | * --all 显示全部              |
+--------------------------------------------+-------------------------------+
| **分支**                                   |                               |
+--------------------------------------------+-------------------------------+
| ``git branch``                             | 列出本地所有分支，当前分支    |
|                                            | 前面会标一个 ``*`` 号         |
|                                            |                               |
|                                            | * -r 列出远程所有分支         |
|                                            | * -a 列出所有分支             |
+--------------------------------------------+-------------------------------+
| ``git branch <branch-name>``               | **创建** 一个新分支           |
+--------------------------------------------+-------------------------------+
| ``git checkout <branch-name>``             | **切换** 到指定分支           |
|                                            | 并更新工作区                  |
| ``git switch <branch-name>``               |                               |
+--------------------------------------------+-------------------------------+
| ``git checkout -b <branch-name>``          | **创建** 并 **切换** 到       |
|                                            | 指定分支                      |
| ``git switch -c <branch-name>``            |                               |
+--------------------------------------------+-------------------------------+
| ``git merge <branch-name>``                | **合并** 指定分支到           |
|                                            | 当前分支                      |
|                                            |                               |
|                                            | * --no-ff 禁用 Fast forward   |
|                                            |   模式                        |
|                                            | * -m 添加描述                 |
+--------------------------------------------+-------------------------------+
| ``git cherry-pick <commit>``               | 选择一个commit，              |
|                                            | 合并进当前分支                |
+--------------------------------------------+-------------------------------+
| ``git rebase <branch-name>``               | 将提交到当前分支上的所有修改  |
|                                            |                               |
|                                            | 都 **合并** 至另一分支上      |
|                                            |                               |
|                                            | rebase 通过合并操作来         |
|                                            | 整合分叉了的历史              |
|                                            |                               |
|                                            | 不要对在你的仓库外有副本的    |
|                                            | 分支执行变基。                |
+--------------------------------------------+-------------------------------+
| ``git branch -d <branch-name>``            | **删除** 指定分支             |
+--------------------------------------------+-------------------------------+
| **标签**                                   |                               |
+--------------------------------------------+-------------------------------+
| ``git tag``                                | 列出所有标签                  |
+--------------------------------------------+-------------------------------+
| ``git tag <tag-name> <commit>``            | **创建** 标签，如不指定       |
|                                            | <commit>, 默认为 HEAD         |
+--------------------------------------------+-------------------------------+
| ``git tag -a <tag-name> -m "message"``     | **创建** 标签，使用 -m        |
|                                            | 添加说明                      |
+--------------------------------------------+-------------------------------+
| **远程仓库**                               |                               |
+--------------------------------------------+-------------------------------+
| ``git remote add <alias> <url>``           | **关联** 一个远程库, alias    |
|                                            | 为别名，如 "orginal"          |
+--------------------------------------------+-------------------------------+
| ``git fetch <alias> <branch>``             | 从远程库 **拉取** 指定分支，  |
|                                            |                               |
|                                            | 如不带分支，则拉取所有分支    |
+--------------------------------------------+-------------------------------+
| ``git merger <alias>/<branch>``            | 将远程库指定分支，            |
|                                            | **合并** 到当前分支           |
+--------------------------------------------+-------------------------------+
| ``git pull``                               | 从远程分支 **拉取** 并        |
|                                            | **合并**                      |
+--------------------------------------------+-------------------------------+
| ``git push <alias> <branch>``              | 从指定分支最新修改 **推送**   |
|                                            | 到远程库                      |
+--------------------------------------------+-------------------------------+
| **储藏与清理**                             |                               |
+--------------------------------------------+-------------------------------+
| ``git stash``                              | **储藏** 工作区和暂存区的更改 |
+--------------------------------------------+-------------------------------+
| ``git stash list``                         | 列出现有的储藏                |
+--------------------------------------------+-------------------------------+
| ``git stash apply <stash-name>``           | **重新应用** 指定储藏         |
+--------------------------------------------+-------------------------------+
| ``git stash drop <stash-name>``            | **移除** 应用指定储藏         |
+--------------------------------------------+-------------------------------+
| ``git clean -n``                           | 展示工作区中将被清理的文件，  |
|                                            |                               |
|                                            | 如未被追踪的文件或空文件夹    |
+--------------------------------------------+-------------------------------+
| ``git clean -f``                           | 执行 **清理**                 |
+--------------------------------------------+-------------------------------+

场景
~~~~

.. image:: ../_static/Git/git_cmd.png

工作流
-------

工作流的选择取决于团队规模，项目大小，个人习惯等。 不管哪种方式，要习惯经常创建，合并，
删除分支。 以我写这个文档为例，也使用了非常简单的工作流，比如使用一个主分支 ``master`` ,
写新的文档时创建一个基于 ``master`` 的分支，文档写完，把分支合并进 ``master``, 然后删除
分支。 下面列举几种广泛使用并在实践中证明过的工作流，可以根据实际情况进行选择。

.. note::

   本章中部分文字和图片出自: 
   
   * `Git Flow Workflow <https://leanpub.com/git-flow/read>`_
   * `廖雪峰的Git教程 <https://www.liaoxuefeng.com/wiki/896043488029600>`_
   * `阮一峰的Git分支管理策略 <http://www.ruanyifeng.com/blog/2012/07/git.html>`_

Git Flow
~~~~~~~~~

Git flow 来自 Vincent Driessen 在2010年发表的分支管理策略 
`A successful Git branching model`_ 。 

.. image:: ../_static/Git/git_flow_0.png

有意思的是今年他又在他的帖子上增加了一个类似于 "10年回顾" 的东西：

   “If your team is doing continuous delivery of software, I would suggest to 
   adopt a much simpler workflow (like GitHub flow) instead of trying to 
   shoehorn git-flow into your team.

   If, however, you are building software that is explicitly versioned, or 
   if you need to support multiple versions of your software in the wild, 
   then git-flow may still be as good of a fit to your team as it has been to 
   people in the last 10 years. In that case, please read on.

   To conclude, always remember that panaceas don't exist. 
   Consider your own context. Don't be hating. Decide for yourself.”

我觉得其中三点对我们选择工作流非常有帮助:

#. 没有万能药，适合的才是最好的
#. 如果你的团队使用持续部署的方式提供软件或者服务，简单的工作流 (如 GitHub flow) 可能更合适
#. 如果你的团队提供基于版本的软件，对不同的版本还要提供持续的支持，那么 Git flow 应该还是合适的 

.. _`A successful Git branching model`: https://nvie.com/posts/a-successful-git-branching-model/

我们从这张示意图开始:

.. image:: ../_static/Git/git_flow_1.png

Git flow 使用一个中心仓库作为所有开发者的沟通中心。 开发者在本地开发然后推送分支到中心仓库。

* 主分支
  中心仓库保持两个永久存在的主分支
  
  .. image:: ../_static/Git/git_flow_2.png

  * ``master`` : 用于存放对外发布的版本，标签永远打在 master 分支上。该分支是一个稳定分支，任何时刻都是可以发布的。
  * ``develop``：作为一个集成分支，用于日常开发，存放最新的开发版。 可以每天拉取此分支做 nightly build。

* 支持分支

  支持分支的作用是辅助团队成员并行开发，追踪功能，准备版本发布，快速修复已有版本问题。 支持分支是临时性的，使用完后
  需要删除。 
  支持分支按作用分为三种：
    
     * 功能( feature )分支
     * 预发布( release )分支
     * 修复( hotfix )分支

  * 功能分支
    
    .. image:: ../_static/Git/git_flow_3.png

    如上图所示，每一个功能分支都是为实现新的功能创建，不要把多个功能混合在同一功能分支：

       * 开始: 从 ``develop`` 分支创建
       * 结束: 合并回 ``develop`` 分支
       * 命名: 任何名称除了 master, develop, release-*, hotfix-*
    
    例如:

    +------------------------------------------+---------------------------------+
    | 开始                                     | 结束                            |
    +==========================================+=================================+
    | ``git checkout -b feature-x develop``    | ``git checkout develop``        |
    |                                          |                                 |
    |                                          | ``git merge --no-ff feature-x`` |
    |                                          |                                 |
    |                                          | ``git branch -d feature-x``     |
    +------------------------------------------+---------------------------------+    

  * 预发布分支
    当开发版本满足发版本要求的时候，我们需要一个创建一个预发布分支，一部分成员可以继续开发新的
    功能，另一部分，可以在预发布分支上进行准备，如测试，生成文档，bug修改等待。

    .. image:: ../_static/Git/git_flow_4.png
     
    预发布分支上不能开发任何新功能，只能进行 bug 修改：

       * 开始: 从 ``develop`` 分支创建
       * 结束: 合并回 ``develop`` 分支和 ``master`` 分支
       * 命名: release-*
     
    例如:

    +------------------------------------------+----------------------------------+
    | 开始                                     | 结束                             |
    +==========================================+==================================+
    | ``git checkout -b release-1.2 develop``  | ``git checkout master``          |
    |                                          |                                  |
    |                                          | ``git merge --no-ff release-1.2``|
    |                                          |                                  |
    |                                          | ``git tag -a 1.2``               |
    |                                          |                                  |
    |                                          | ``git checkout develop``         |
    |                                          |                                  |
    |                                          | ``git merge --no-ff release-1.2``|
    |                                          |                                  |
    |                                          | ``git branch -d release-1.2``    |
    +------------------------------------------+----------------------------------+

  * 修复分支

    .. image:: ../_static/Git/git_flow_5.png
    
    当发布的版本出现问题时，需要创建一个修复分支来修复 bug：

       * 开始: 从 ``master`` 分支创建
       * 结束: 合并回 ``master`` 分支和 ``develop`` 分支
       * 命名: hotfix-*       

    例如:

    +------------------------------------------+----------------------------------+
    | 开始                                     | 结束                             |
    +==========================================+==================================+
    | ``git checkout -b hotfix-1.2 master``    | ``git checkout master``          |
    |                                          |                                  |
    |                                          | ``git merge --no-ff hotfix-1.2`` |
    |                                          |                                  |
    |                                          | ``git tag -a 1.2.1``             |
    |                                          |                                  |
    |                                          | ``git checkout develop``         |
    |                                          |                                  |
    |                                          | ``git merge --no-ff hotfix-1.2`` |
    |                                          |                                  |
    |                                          | ``git branch -d hotfix-1.2``     |
    +------------------------------------------+----------------------------------+

.. important::

   这里 merge 使用了 ``--no-ff`` 是为了保留分支信息。

   ``fast-farward merge`` VS ``--no-ff``

   .. image:: ../_static/Git/git_flow_6.png

下面这个图中总结了上面的命令：

.. image:: ../_static/Git/git_flow_7.png

Windows 版的 Git 集成了 ``git flow`` 命令，可以使上面的命令简单些

.. image:: ../_static/Git/git_flow_8.png

这里的 ``start`` 和 ``finish`` 命令对应 git 命令中的开始和结束流程。 

.. seealso::

   更多 ``git flow`` 的例子参见 
   `Using git-flow to automate your git branching workflow <https://jeffkreeftmeijer.com/git-flow/>`_

GitHub Flow
~~~~~~~~~~~~~


GitLab Flow
~~~~~~~~~~~~~

Git 服务器
-----------

GitHub
~~~~~~~

.. image:: ../_static/Git/github_logo.png
   :height: 100

GitLab
~~~~~~~



Git 客户端
-----------

Sourcetree
-----------

.. image:: ../_static/Git/sourcetree_logo.png
   :height: 100


VSCode
--------

